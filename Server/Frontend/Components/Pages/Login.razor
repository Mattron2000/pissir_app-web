@page "/pages/Login"
@rendermode InteractiveWebAssembly

@using FluentValidation
@using Frontend.States
@using Shared.FluentValidators;

@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IValidator<UserLoginDTO> Validator
@inject AuthState AuthState
@inject AuthStateNotifier AuthStateNotifier

<PageTitle>@Title</PageTitle>

@if (!OperatingSystem.IsBrowser())
{
    <LoadingSpinner Name="@(Title + " WebAssembly")" />
    return;
}

<h3>User Login</h3>

@if (AuthState.User != null)
{
    <div class="alert alert-success d-flex max-width-item">
        <span class="bi bi-check-circle-fill"></span>
        <strong class="me-2">Success</strong> You are logged in as @AuthState.User.Surname @AuthState.User.Name
    </div>
    return;
}

@if (!string.IsNullOrEmpty(Reason))
{
    <div class="alert alert-warning alert-dismissible d-flex max-width-item">
        <span class="bi bi-exclamation-triangle-fill"></span>
        <strong class="me-2">@StatusCode</strong> @Reason
        <button type="button" class="btn-close" @onclick="() => Reason = string.Empty"></button>
    </div>
}

@if (errors.Count > 0)
{
<ul class="text-danger mt-4">
    @foreach (var error in errors)
    {
        <li>@error</li>
    }
</ul>
}

<EditForm Model="@loginUser" OnSubmit="HandleLoginSubmit">
    <div class="mb-3 max-width-item">
        <label for="email" class="form-label">Email:</label>
        <InputText class="form-control" @bind-Value="loginUser.Email" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="password" class="form-label">Password:</label>
        <InputText class="form-control" type="password"  @bind-Value="loginUser.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<br>

<div>Don't have an account? <a href="/pages/Register">Register</a></div>

@code {
    private readonly string Title = "Login";
    private UserLoginDTO loginUser = new();
    private string Reason = string.Empty;
    private string StatusCode = string.Empty;
    private List<string> errors = new();

    private async Task HandleLoginSubmit()
    {
        var validator = new UserLoginValidator();
        var results = validator.Validate(loginUser);

        var StatusValidation = results.IsValid;
        errors = results.Errors.Select(e => e.ErrorMessage).ToList();

        StatusCode = "";
        Reason = string.Empty;

        if (!StatusValidation)
        {
            Reason = "Please respect the validator suggestions";
            return;
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync("api/v1/login", loginUser);

        StatusValidation = response.IsSuccessStatusCode;
        StatusCode = response.StatusCode + "";

        if (StatusValidation)
        {
            Reason = "User logged in successfully";
            AuthState.SetUser(response.Content.ReadFromJsonAsync<UserEntityDTO>().Result);
            return;
        }

        Reason = response.Content.ReadFromJsonAsync<UserMessageDTO>().Result?.Message ?? "Unknown error";
    }
}
