@page "/pages/Register"
@rendermode InteractiveWebAssembly

@using FluentValidation
@using Shared.DTOs.User
@using Shared.FluentValidators

@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IValidator<UserRegisterDTO> Validator

<PageTitle>@Title</PageTitle>

@if (! OperatingSystem.IsBrowser())
{
    <LoadingSpinner Name="@(Title + " WebAssembly")" />
    return;
}

<h3>User Registration</h3>

@if (!string.IsNullOrEmpty(Reason))
{
    <div class="alert alert-@(StatusValidation ? "success" : "warning") alert-dismissible d-flex max-width-item">
        <span class="bi @(StatusValidation ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill")"></span>
        <strong class="me-2">@StatusCode</strong> @Reason
        <button type="button" class="btn-close" @onclick="() => Reason = string.Empty"></button>
    </div>
}

@if (errors.Count > 0)
{
<ul class="text-danger mt-4">
    @foreach (var error in errors)
    {
        <li>@error</li>
    }
</ul>
}

<EditForm Model="@registerUser" OnSubmit="HandleRegisterSubmit">
    <div class="mb-3 max-width-item">
        <label for="email" class="form-label">Email:</label>
        <InputText class="form-control" @bind-Value="registerUser.Email" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="password" class="form-label">Password:</label>
        <InputText class="form-control" type="password"  @bind-Value="registerUser.Password" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="name" class="form-label">Name:</label>
        <InputText class="form-control" @bind-Value="registerUser.Name" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="surname" class="form-label">Surname:</label>
        <InputText class="form-control" @bind-Value="registerUser.Surname" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

<br>

<div>Already registered? <a href="@LoginPath">Login</a></div>

@code {
    private readonly string Title = "Register";
    private readonly string LoginPath = "/pages/Login";
    private UserRegisterDTO registerUser = new();
    private bool StatusValidation = false;
    private string StatusCode = string.Empty;
    private string Reason = string.Empty;
    private List<string> errors = new();

    private async Task HandleRegisterSubmit()
    {
        var validator = new UserRegisterValidator();
        var results = validator.Validate(registerUser);

        StatusValidation = results.IsValid;
        errors = results.Errors.Select(e => e.ErrorMessage).ToList();
        Reason = string.Empty;

        if (!StatusValidation)
        {
            StatusCode = "";
            Reason = "Please respect the validator suggestions";
            return;
        } else {
            StatusCode = "";
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync("api/v1/users/register", registerUser);

        StatusValidation = response.IsSuccessStatusCode;
        StatusCode = response.StatusCode + "";

        if (StatusValidation)
            Reason = "User registered successfully";
        else
            Reason = response.Content.ReadFromJsonAsync<MessageDTO>().Result?.Message ?? "Unknown error";
    }
}
