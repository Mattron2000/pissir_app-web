@page "/pages/totem/exit"
@rendermode InteractiveWebAssembly

@using Frontend.States
@using Shared.DTOs.Fine
@using Shared.DTOs.Request
@using static Frontend.Components.MessageBox

@inject AuthState AuthState
@inject AuthStateNotifier AuthStateNotifier
@inject HttpClient Http

<PageTitle>@Title</PageTitle>

@if (!OperatingSystem.IsBrowser())
{
    <LoadingSpinner Name="@(Title + " WebAssembly")" />
    return;
}

<h3><strong>@Title</strong></h3>

<PriceBox />

@if (AuthState.User == null)
{
    <Login OnClickCallback="OnSuccessfulLogin" />
    return;
}

<div class="mb-3" />

<CascadingValue Value="RequestModel">
    <MessageBox OnCloseCallBack="OnClickMessageBox" OnSubmitCallBack="OnSubmitMessageBox" />
</CascadingValue>

@code {
    public readonly string Title = "Exit Totem";

    private MessageBoxModel RequestModel = new();

    private RequestDTO? Request = null;

    protected override void OnInitialized() => AuthStateNotifier.Subscribe(StateHasChanged);
    public void Dispose() => AuthStateNotifier.Unsubscribe(StateHasChanged);

    private async void OnSuccessfulLogin()
    {
        if (AuthState.User == null) {
            SetMessageBox(
                "Login Required",
                "You must be logged in to exit the totem.",
                MessageType.Warning
            );
            return;
        }

        List<RequestDTO>? requests = await Http.GetFromJsonAsync<List<RequestDTO>>("api/v1/requests/" + AuthState.User.Email + "?paid=false");

        if (requests == null || requests.Count == 0) {
            SetMessageBox(
                "No Unpaid Requests",
                "You do not have any unpaid requests."
            );
            return;
        }

        if (requests.Count > 1) {
            SetMessageBox(
                "Multiple Unpaid Requests",
                "You have multiple unpaid requests."
            );
            return;
        }

        Request = requests.First();

        var reasons = new List<string> {
            $"Email: {Request.Email}",
            $"Start Date: {DateTime.Parse(Request.DatetimeStart).ToString("dd/MM/yyyy HH:mm")}",
            $"End Date: {DateTime.Parse(Request.DatetimeEnd).ToString("dd/MM/yyyy HH:mm")}",
            $"Slot ID: {Request.SlotId}"
        };

        if (Request.Kw.HasValue || Request.Kw >= 0)
            reasons.Add($"Kw: {Request.Kw.Value}");

        TimeSpan timeDifference;

        if (DateTime.Parse(Request.DatetimeStart) > DateTime.Now)
            timeDifference = DateTime.Parse(Request.DatetimeStart) - DateTime.Now;
        else
            timeDifference = DateTime.Now - DateTime.Parse(Request.DatetimeStart);

        if(timeDifference.TotalMinutes < TimeSpan.FromMinutes(15).Minutes) {
            SetMessageBox(
                "Request Details",
                type: MessageType.Success,
                reasons: reasons.ToArray(),
                hasSubmitButton: true,
                SubmitMessage: "Pay Request Now and Exit"
            );
        } else {
            SetMessageBox(
            "Request Details",
                type: MessageType.Warning,
                reasons: reasons.ToArray(),
                hasSubmitButton: true,
                SubmitMessage: "Convert Request to Fine and Exit"
            );
        }
    }

    private void OnClickMessageBox()
    {
        RequestModel.Reset();
        AuthState.SetUser(null);
        StateHasChanged();
    }

    private async void OnSubmitMessageBox()
    {
        if (Request == null)
        {
            SetMessageBox("Error", "Request is null. Cannot proceed with payment.");
            return;
        }

        if (RequestModel.Type == MessageType.Success) {
            var response = await Http.PatchAsync("api/v1/requests/" + Request.Email, null );

            if (!response.IsSuccessStatusCode)
            {
                SetMessageBox("Error", "Failed to pay the request. Please try again later.");
                return;
            }

            SetMessageBox(
                "Request Paid",
                "Your request has been successfully paid. You can now exit the totem.",
                MessageType.Success
            );
        } else {
            var response = await Http.DeleteAsync("api/v1/requests?email=" + Request.Email + "&datetime_start=" + Request.DatetimeStart);

            if (!response.IsSuccessStatusCode)
            {
                SetMessageBox("Error", "Failed to convert the request to a fine. Please try again later.");
                return;
            }

            var newFine = new FineNewDTO {
                Email = Request.Email,
                DatetimeStart = Request.DatetimeStart,
                DatetimeEnd = Request.DatetimeEnd
            };

            Console.WriteLine($"New Fine: email = {newFine.Email}, datetime_start = {newFine.DatetimeStart}, datetime_end = {newFine.DatetimeEnd}");

            response = await Http.PostAsJsonAsync("api/v1/fines", newFine);

            if (!response.IsSuccessStatusCode)
            {
                SetMessageBox("Error", "Failed to convert the request to a fine. Please try again later.");
                return;
            }

            var fine = await response.Content.ReadFromJsonAsync<FineEntityDTO>();

            if (fine == null)
            {
                SetMessageBox("Error", "Failed to convert the request to a fine. Please try again later.");
                return;
            }

            SetMessageBox(
                "Request Converted to Fine",
                "Your request has been converted to a fine. You can now exit the totem.",
                MessageType.Success,
                [
                    $"Email: {fine.Email}",
                    $"Start Date: {DateTime.Parse(fine.DatetimeStart).ToString("dd-MM-yyyy HH:mm")}",
                    $"End Date: {DateTime.Parse(fine.DatetimeEnd).ToString("dd-MM-yyyy HH:mm")}"
                ]
            );
        }
    }

    private void SetMessageBox(
            string title,
            string body = "",
            MessageType type = MessageType.Warning,
            string[]? reasons = null,
            bool hasSubmitButton = false,
            bool isVisible = true,
            string? SubmitMessage = null)
    {
        RequestModel.SetMessageBox(title, body, type, reasons, hasSubmitButton, isVisible, SubmitMessage);
        StateHasChanged();
    }
}
