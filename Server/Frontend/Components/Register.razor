@using FluentValidation
@using Frontend.States
@using Shared.DTOs.User
@using Shared.FluentValidators
@using static Frontend.Components.ErrorBox

@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IValidator<UserRegisterDTO> Validator
@inject AuthState AuthState
@inject AuthStateNotifier AuthStateNotifier

<PageTitle>@Title</PageTitle>

@if (! OperatingSystem.IsBrowser())
{
    <LoadingSpinner Name="@(Title + " WebAssembly")" />
    return;
}

<h3>User Registration</h3>

@if (AuthState.User != null)
{
    <div class="alert alert-success d-flex max-width-item">
        <span class="bi bi-check-circle-fill"></span>
        <strong class="me-2">Success</strong> You are logged in as @AuthState.User.Surname @AuthState.User.Name
    </div>
    return;
}

<CascadingValue Value="errorModel">
    <ErrorBox OnClickCallback="ResetState" />
</CascadingValue>

<EditForm Model="@registerUser" OnSubmit="HandleRegisterSubmit">
    <div class="mb-3 max-width-item">
        <label for="email" class="form-label">Email:</label>
        <InputText class="form-control" @bind-Value="registerUser.Email" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="password" class="form-label">Password:</label>
        <InputText class="form-control" type="password"  @bind-Value="registerUser.Password" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="name" class="form-label">Name:</label>
        <InputText class="form-control" @bind-Value="registerUser.Name" />
    </div>

    <div class="mb-3 max-width-item">
        <label for="surname" class="form-label">Surname:</label>
        <InputText class="form-control" @bind-Value="registerUser.Surname" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

<br>

<div>Already registered? <a class="text-decoration-underline text-primary" @onclick="() => OnClickCallback.InvokeAsync()">Login</a></div>

@code {
    [Parameter] public EventCallback OnClickCallback { get; set; }

    private readonly string Title = "Register";
    private UserRegisterDTO registerUser = new();
    private bool StatusValidation = false;
    private ErrorBoxModel errorModel = new();

    private async Task HandleRegisterSubmit()
    {
        ResetState();

        var validator = new UserRegisterValidator();
        var results = validator.Validate(registerUser);

        StatusValidation = results.IsValid;
        errorModel.Errors = results.Errors.Select(e => e.ErrorMessage).ToList();
        errorModel.Reason = string.Empty;

        if (!StatusValidation)
        {
            errorModel.StatusCode = "";
            errorModel.Reason = "Please respect the validator suggestions";
            return;
        } else {
            errorModel.StatusCode = "";
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync("api/v1/users/register", registerUser);

        StatusValidation = response.IsSuccessStatusCode;
        errorModel.StatusCode = response.StatusCode + "";

        if (StatusValidation)
            errorModel.Reason = "User registered successfully";
        else
            errorModel.Reason = response.Content.ReadFromJsonAsync<MessageDTO>().Result?.Message ?? "Unknown error";
    }

    private void ResetState()
    {
        errorModel.Reason = string.Empty;
        errorModel.StatusCode = string.Empty;
        errorModel.Errors = new();
    }
}
