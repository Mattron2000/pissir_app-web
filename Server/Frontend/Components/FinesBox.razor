@using Frontend.States
@using Shared.DTOs.Fine

@inject AuthState AuthState
@inject HttpClient Http

<div class="m-3">
    <p><strong>Cronologia delle multe.</strong></p>

    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Paid</th>
                <th />
            </tr>
        </thead>
        <tbody>
        @if (fines != null && fines.Any())
        {
            @foreach (var fine in fines)
            {
                <tr>
                    <td>@fine.Email</td>
                    <td>@(DateTime.Parse(fine.DatetimeStart).ToString("yyyy-MM-dd HH:mm"))</td>
                    <td>@(DateTime.Parse(fine.DatetimeEnd).ToString("yyyy-MM-dd HH:mm"))</td>
                    <td>@(fine.Paid ? "Yes" : "No")</td>
                    <td>
                    @if (!fine.Paid)
                    {
                        <button class="btn btn-primary" @onclick="() => DeleteFineAsync(fine.Email, fine.DatetimeStart)">Pay</button>
                    } else {
                        <button class="btn btn-secondary" disabled>Pay</button>
                    }
                    </td>
                </tr>
            }
        } else {
            <p>No fines available.</p>
        }
        </tbody>
    </table>
</div>


@code {
    private List<FineEntityDTO> fines = new();

    protected override void OnInitialized() => LoadFinesAsync();

    private async void LoadFinesAsync() {
        if (AuthState.User == null) return;

        var result = await Http.GetFromJsonAsync<List<FineEntityDTO>>("api/v1/fines/" + AuthState.User.Email);
        fines = result ?? new List<FineEntityDTO>();
        StateHasChanged();
    }

    private async void DeleteFineAsync(string email, string start) {
        await Http.PatchAsJsonAsync("api/v1/fines?email=" + email + "&datetime=" + start, new {});
        LoadFinesAsync();
    }
}

