// <auto-generated />
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(SmartParkingContext))]
    [Migration("20250427191012_CreatePriceTable")]
    partial class CreatePriceTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Backend.Models.Price", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.HasKey("Type");

                    b.ToTable("Prices", t =>
                        {
                            t.HasCheckConstraint("CK_Price_Amount", "Amount > 0.0");
                        });

                    b.HasData(
                        new
                        {
                            Type = "PARKING",
                            Amount = 5.5
                        },
                        new
                        {
                            Type = "CHARGING",
                            Amount = 7.25
                        });
                });

            modelBuilder.Entity("Backend.Models.PriceType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("PriceTypes");

                    b.HasData(
                        new
                        {
                            Name = "PARKING"
                        },
                        new
                        {
                            Name = "CHARGING"
                        });
                });

            modelBuilder.Entity("Backend.Models.SlotStatus", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("SlotStatuses");

                    b.HasData(
                        new
                        {
                            Name = "FREE"
                        },
                        new
                        {
                            Name = "OCCUPIED"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN"
                        },
                        new
                        {
                            Name = "BASE"
                        },
                        new
                        {
                            Name = "PREMIUM"
                        });
                });

            modelBuilder.Entity("Backend.Models.Price", b =>
                {
                    b.HasOne("Backend.Models.PriceType", "PriceType")
                        .WithOne("Price")
                        .HasForeignKey("Backend.Models.Price", "Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceType");
                });

            modelBuilder.Entity("Backend.Models.PriceType", b =>
                {
                    b.Navigation("Price")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
