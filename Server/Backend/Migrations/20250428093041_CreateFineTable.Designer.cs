// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(SmartParkingContext))]
    [Migration("20250428093041_CreateFineTable")]
    partial class CreateFineTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Backend.Models.Fine", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false);

                    b.HasKey("UserEmail", "DateTimeStart");

                    b.ToTable("Fines", t =>
                        {
                            t.HasCheckConstraint("CK_Fine_DateTime", "DateTimeStart < DateTimeEnd");
                        });
                });

            modelBuilder.Entity("Backend.Models.Price", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.HasKey("Type");

                    b.ToTable("Prices", t =>
                        {
                            t.HasCheckConstraint("CK_Price_Amount", "Amount > 0.0");
                        });

                    b.HasData(
                        new
                        {
                            Type = "PARKING",
                            Amount = 5.5
                        },
                        new
                        {
                            Type = "CHARGING",
                            Amount = 7.25
                        });
                });

            modelBuilder.Entity("Backend.Models.PriceType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("PriceTypes");

                    b.HasData(
                        new
                        {
                            Name = "PARKING"
                        },
                        new
                        {
                            Name = "CHARGING"
                        });
                });

            modelBuilder.Entity("Backend.Models.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "FREE"
                        },
                        new
                        {
                            Id = 2,
                            Status = "FREE"
                        },
                        new
                        {
                            Id = 3,
                            Status = "FREE"
                        },
                        new
                        {
                            Id = 4,
                            Status = "FREE"
                        },
                        new
                        {
                            Id = 5,
                            Status = "FREE"
                        });
                });

            modelBuilder.Entity("Backend.Models.SlotStatus", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("SlotStatuses");

                    b.HasData(
                        new
                        {
                            Name = "FREE"
                        },
                        new
                        {
                            Name = "OCCUPIED"
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.HasIndex("Type");

                    b.HasIndex("Email", "Password")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Name", "Name <> ''");

                            t.HasCheckConstraint("CK_User_Password", "Length(Password) >= 8");

                            t.HasCheckConstraint("CK_User_Surname", "Surname <> ''");
                        });

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            Name = "Matteo",
                            Password = "adminadmin",
                            Surname = "Palmieri",
                            Type = "ADMIN"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN"
                        },
                        new
                        {
                            Name = "BASE"
                        },
                        new
                        {
                            Name = "PREMIUM"
                        });
                });

            modelBuilder.Entity("Backend.Models.Fine", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Fines")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Price", b =>
                {
                    b.HasOne("Backend.Models.PriceType", "PriceType")
                        .WithOne("Price")
                        .HasForeignKey("Backend.Models.Price", "Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceType");
                });

            modelBuilder.Entity("Backend.Models.Slot", b =>
                {
                    b.HasOne("Backend.Models.SlotStatus", "SlotStatus")
                        .WithMany("Slots")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotStatus");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Backend.Models.PriceType", b =>
                {
                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.SlotStatus", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("Backend.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
